
import logging
from aiogram import Bot, Dispatcher, executor, types
import sqlite3
from aiogram.dispatcher.filters.state import StatesGroup,State
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
import time
import aiogram.utils.markdown as md
from aiogram.dispatcher import filters
from buttons import kb_client


storage = MemoryStorage()

API_TOKEN = 'TOKEN HERE'

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot,storage=storage)


base = sqlite3.connect('bks.db')
cur = base.cursor()
if base:
    print('Data base connected')
base.execute('CREATE TABLE IF NOT EXISTS workers(user_id INTEGER, fio TEXT,adres TEXT)')
base.execute('CREATE TABLE IF NOT EXISTS Chosen(user_id INTEGER,fio TEXT,adres TEXT,chooser_id INTEGER)')
base.execute('CREATE TABLE IF NOT EXISTS Result(Sender TEXT,Receiver TEXT)')
base.commit()



class Plan(StatesGroup):
    plan = State()
    plan1 = State()


""" *****************************************    –ù–ê–ß–ò–ù–ê–ï–ú   ******************************************"""
@dp.message_handler(commands="start")
async def cmd_start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø - –ù–æ–≤–æ–≥–æ–¥–Ω–∏–π –ë–æ—Ç üéÖ \n–Ø —Å–æ–∑–¥–∞–Ω –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ–¥–Ω–µ–≥–æ –æ–±–º–µ–Ω–∞ –ø–æ–¥–∞—Ä–∫–∞–º–∏ —Å—Ä–µ–¥–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.\n–í–æ—Ç –∫–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:\n 1. –°–Ω–∞—á–∞–ª–∞, –∫–∞–∂–¥—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –¥–æ–ª–∂–µ–Ω –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è, –æ—Ç–ø—Ä–∞–≤–∏–≤ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ.\n 2. –ü–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –≤—Å–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –º–æ–≥—É—Ç –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É '–í—ã–±–∏—Ä–∞–π' –∏ —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –≤—ã–±—Ä–∞—Ç—å –∏–º—è –∏ –∞–¥—Ä–µ—Å –¥—Ä—É–≥–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.\n 3. –ó–∞—Ç–µ–º, –∫–∞–∂–¥—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç –ø–æ–¥–∞—Ä–æ–∫ –¥—Ä—É–≥–æ–º—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã–±—Ä–∞–ª.\n 4. –¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, –≤—Å–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –ø–æ–ª—É—á–∞—Ç –Ω–æ–≤–æ–≥–æ–¥–Ω–∏–π –ø–æ–¥–∞—Ä–æ–∫ –∏ —Å–¥–µ–ª–∞—é—Ç –¥—Ä—É–≥ –¥—Ä—É–≥—É –ø—Ä–∞–∑–¥–Ω–∏–∫ –Ω–µ–∑–∞–±—ã–≤–∞–µ–º—ã–º üéÅ \n–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è.\n–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –∫–∞–∫–∏–µ-–ª–∏–±–æ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è! –° –ù–æ–≤—ã–º –ì–æ–¥–æ–º! üéâ",reply_markup=kb_client)

"""  *****************************************   –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è   **************************************    """
@dp.message_handler(commands = "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
async def send_plan(message: types.Message):
    user_id = message.from_user.id
    base = sqlite3.connect('bks.db')
    cur = base.cursor()
    registered_users = [row[0] for row in cur.execute("SELECT user_id FROM workers").fetchall()]
    chosen_users = [row[0] for row in cur.execute("SELECT chooser_id FROM Chosen").fetchall()]

    if user_id in chosen_users:
        await message.answer("–í—ã —É–∂–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª–∏, —Å–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!")
    elif user_id in registered_users:
        await message.answer('–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!')
    else:
        await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –§–ò–û?')
        await Plan.plan.set()

@dp.message_handler(state=Plan.plan)
async def plan_sale(message: types.Message,state:FSMContext):
    async with state.proxy() as pla :
        pla['plan'] = message.text
        time.sleep(1)
        await Plan.next()
        await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –ø–æ—á—Ç–æ–≤—ã–µ –∞–¥—Ä–µ—Å?')

@dp.message_handler(state=Plan.plan1)
async def plan_ems(message: types.Message,state:FSMContext):
    async with state.proxy() as pla :
        pla['plan1'] = message.text
        time.sleep(1)
        sqlite3.connect('bks.db')
        fio = pla['plan']
        adres = pla['plan1']
        id_user = message.from_user.id
        cur = base.cursor()
        cur.execute("INSERT INTO workers VALUES (?,?,?)",(id_user,fio,adres,))
        base.commit()
        await bot.send_message(
            message.chat.id,
            md.text(
                md.text('ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ : ', md.bold(id_user)),
                md.text('–§–ò–û —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:', pla['plan']),
                md.text('–ê–¥—Ä–µ—Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:',pla['plan1']),
                sep='\n'))
        await message.answer('–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é! –í–∞—à–µ –§–ò–û –∏ –∞–¥—Ä–µ—Å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.')
        await state.finish()



@dp.message_handler(commands=["–í—ã–±–∏—Ä–∞–π"])
async def choose(message: types.Message):

    user = message.from_user.id
    base = sqlite3.connect('bks.db')
    cur = base.cursor()


    all_id = [row[0] for row in cur.execute("SELECT chooser_id FROM Chosen").fetchall()]


    if user in all_id:
        await message.answer("–í—ã —É–∂–µ –≤—ã–±—Ä–∞–ª–∏")
    else:
        kisi = cur.execute("SELECT user_id,fio, adres FROM workers WHERE user_id != ? ORDER BY RANDOM() LIMIT 1", (user,)).fetchone()
        user_id,fio,adres = kisi

        await message.answer(f"ID-–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:{user_id}\n–§–ò–û-–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:{fio}\n–ê–¥—Ä–µ—Å –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:{adres}")
        secilen = cur.execute("INSERT INTO Chosen VALUES (?,?,?,?)",(user_id,fio,adres,user,))
        gonderen = cur.execute("SELECT fio FROM workers WHERE user_id = ?",(user,)).fetchone()
        print(gonderen)
        print(kisi[1])
        sonuc = cur.execute("INSERT INTO Result VALUES (?,?)",(gonderen[0],kisi[1],))
        #cur.execute("DELETE FROM workers WHERE user_id = ?",(user_id,))
        base.commit()
        await message.answer('C–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!')



@dp.message_handler(filters.IDFilter(user_id=1353075505),commands="Delete_all")
async def udalit(message:types.message):

    base = sqlite3.connect('bks.db')
    cur = base.cursor()
    cur.execute("DELETE FROM workers").fetchall()
    cur.execute("DELETE FROM Chosen").fetchall()
    cur.execute("DELETE FROM Result").fetchall()
    base.commit()
    await message.answer("–í—Å–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–∏–Ω—ã!")





"""" ******************** –¢–æ–ª—å–∫–æ –ê–¥–º–∏–Ω ******************************* """

@dp.message_handler(filters.IDFilter(user_id=1353075505),commands = "Admin")
async def admin_panel(message:types.Message):
    await message.answer('–î–æ–±—Ä—ã–π –¥–µ–Ω—å, Admin! –ß—Ç–æ —Ö–æ—Ç–µ–ª–∏ –±—ã —Å–¥–µ–ª–∞—Ç—å? –û–±—Ä–∞—â–∞—é –í–∞—à–µ –≤–Ω–∏–º–∞–Ω–∏–µ , —á—Ç–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∞ –Ω–∞ –º–µ—Å—è—Ü –∏–ª–∏ –¥–ª—è –µ–≥–æ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–¥–∞–ª–∏—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã–µ —Ä–∞–Ω–µ–µ –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–º–æ—â—å—é /Delete_all')



if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
